/* Generated By:JavaCC: Do not edit this line. Scanner_1Constants.java */
package compilador;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface Scanner_1Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMENTARIO = 5;
  /** RegularExpression Id. */
  int COMENTARIOS = 6;
  /** RegularExpression Id. */
  int COM = 7;
  /** RegularExpression Id. */
  int INICIO = 8;
  /** RegularExpression Id. */
  int INT = 9;
  /** RegularExpression Id. */
  int FLOAT = 10;
  /** RegularExpression Id. */
  int BOOLEAN = 11;
  /** RegularExpression Id. */
  int CHAR = 12;
  /** RegularExpression Id. */
  int STRING = 13;
  /** RegularExpression Id. */
  int NULL = 14;
  /** RegularExpression Id. */
  int IMPORT = 15;
  /** RegularExpression Id. */
  int PACKAGE = 16;
  /** RegularExpression Id. */
  int CLASS = 17;
  /** RegularExpression Id. */
  int MAIN = 18;
  /** RegularExpression Id. */
  int ARGS = 19;
  /** RegularExpression Id. */
  int VOID = 20;
  /** RegularExpression Id. */
  int RETURN = 21;
  /** RegularExpression Id. */
  int STATIC = 22;
  /** RegularExpression Id. */
  int PRIVATE = 23;
  /** RegularExpression Id. */
  int PUBLIC = 24;
  /** RegularExpression Id. */
  int IF = 25;
  /** RegularExpression Id. */
  int ELSE = 26;
  /** RegularExpression Id. */
  int TRUE = 27;
  /** RegularExpression Id. */
  int FALSE = 28;
  /** RegularExpression Id. */
  int PRINT = 29;
  /** RegularExpression Id. */
  int WHILE = 30;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 31;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 32;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 33;
  /** RegularExpression Id. */
  int EXPONENT = 34;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 35;
  /** RegularExpression Id. */
  int STRING_LITERAL = 36;
  /** RegularExpression Id. */
  int AP = 37;
  /** RegularExpression Id. */
  int FP = 38;
  /** RegularExpression Id. */
  int AC = 39;
  /** RegularExpression Id. */
  int FC = 40;
  /** RegularExpression Id. */
  int AB = 41;
  /** RegularExpression Id. */
  int FB = 42;
  /** RegularExpression Id. */
  int SEMICOLON = 43;
  /** RegularExpression Id. */
  int COMMA = 44;
  /** RegularExpression Id. */
  int DOT = 45;
  /** RegularExpression Id. */
  int DOTSTART = 46;
  /** RegularExpression Id. */
  int ASSIGN = 47;
  /** RegularExpression Id. */
  int GT = 48;
  /** RegularExpression Id. */
  int LT = 49;
  /** RegularExpression Id. */
  int BANG = 50;
  /** RegularExpression Id. */
  int COLON = 51;
  /** RegularExpression Id. */
  int EQ = 52;
  /** RegularExpression Id. */
  int LE = 53;
  /** RegularExpression Id. */
  int GE = 54;
  /** RegularExpression Id. */
  int NE = 55;
  /** RegularExpression Id. */
  int SC_OR = 56;
  /** RegularExpression Id. */
  int SC_AND = 57;
  /** RegularExpression Id. */
  int INCR = 58;
  /** RegularExpression Id. */
  int DECR = 59;
  /** RegularExpression Id. */
  int PLUS = 60;
  /** RegularExpression Id. */
  int MINUS = 61;
  /** RegularExpression Id. */
  int STAR = 62;
  /** RegularExpression Id. */
  int SLASH = 63;
  /** RegularExpression Id. */
  int REM = 64;
  /** RegularExpression Id. */
  int PLUSASSIGN = 65;
  /** RegularExpression Id. */
  int MINUSASSIGN = 66;
  /** RegularExpression Id. */
  int STARASSIGN = 67;
  /** RegularExpression Id. */
  int SLASHASSIGN = 68;
  /** RegularExpression Id. */
  int REMASSIGN = 69;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 70;
  /** RegularExpression Id. */
  int LETTER = 71;
  /** RegularExpression Id. */
  int DIGIT = 72;
  /** RegularExpression Id. */
  int INVALIDO_LEXICO = 73;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<COMENTARIO>",
    "<COMENTARIOS>",
    "<COM>",
    "\"inicio\"",
    "\"int\"",
    "\"float\"",
    "\"boolean\"",
    "\"char\"",
    "\"String\"",
    "\"null\"",
    "\"import\"",
    "\"package\"",
    "\"class\"",
    "\"main\"",
    "\"args\"",
    "\"void\"",
    "\"return\"",
    "\"static\"",
    "\"private\"",
    "\"public\"",
    "\"if\"",
    "\"else\"",
    "\"true\"",
    "\"false\"",
    "\"System.out.println\"",
    "\"while\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\".*\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "<IDENTIFICADOR>",
    "<LETTER>",
    "<DIGIT>",
    "<INVALIDO_LEXICO>",
  };

}
