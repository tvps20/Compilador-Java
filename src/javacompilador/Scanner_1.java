/* Generated By:JavaCC: Do not edit this line. Scanner_1.java */
package compilador;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;

public class Scanner_1 implements Scanner_1Constants {

    boolean Menosshort = false; //Saida resumida falso
    public void processa() throws Exception {
        Token t = new Token ();

        do {

            t = getNextToken(); //Obtém o próximo token
            String nomeToken = tokenImage[t.kind]; //guarda o nome do token na string

        } while(t.kind!=0); //condicao de parada: final do arquivo (constante eof 0 )
    }

        public static void main(String args[], String x) throws ParseException, FileNotFoundException {

            try {

            }catch (Error e){
                System.out.println(e.getMessage()); //Mensagem de erro léxico (em ingles) mostrando linha e coluna
            }

        }

/*****************************************
 *       THE JAVA LANGUAGE GRAMMAR       *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  final public void INIT() throws ParseException {
    programa();
  }

  final public void programa() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      PackageDeclaration();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    ClassDeclaration();
  }

  final public void PackageDeclaration() throws ParseException {
    jj_consume_token(PACKAGE);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(SEMICOLON);
  }

//void Import():{}{<IMPORT>(( <IDENTIFICADOR> "." <IDENTIFICADOR> ) | <IDENTIFICADOR>) ";" }
  final public void ClassDeclaration() throws ParseException {
    Modifier();
    jj_consume_token(CLASS);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(AC);
    FieldDeclaration();
    jj_consume_token(FC);
  }

  final public void FieldDeclaration() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      Modifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        jj_consume_token(STATIC);
        Type();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          jj_consume_token(IDENTIFICADOR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
          case COMMA:
            VariableDeclarator();
            break;
          case AP:
            MethodDeclaration();
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case MAIN:
          Main();
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case IDENTIFICADOR:
        ConstructorDeclaration();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void VariableDeclarator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case COMMA:
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFICADOR);
      }
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MethodDeclaration() throws ParseException {
    jj_consume_token(AP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case FLOAT:
    case BOOLEAN:
    case CHAR:
    case VOID:
      ParameterList();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(FP);
    StatementBlock();
  }

  final public void Main() throws ParseException {
    jj_consume_token(MAIN);
    jj_consume_token(AP);
    jj_consume_token(STRING);
    jj_consume_token(AB);
    jj_consume_token(FB);
    jj_consume_token(ARGS);
    jj_consume_token(FP);
    StatementBlock();
  }

  final public void ConstructorDeclaration() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(AP);
    jj_consume_token(FP);
    StatementBlock();
  }

  final public void ParameterList() throws ParseException {
    Parameter();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      Parameter();
    }
  }

  final public void Parameter() throws ParseException {
    Type();
    jj_consume_token(IDENTIFICADOR);
  }

  final public void StatementBlock() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AC:
      jj_consume_token(AC);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case FLOAT:
        case BOOLEAN:
        case CHAR:
        case VOID:
        case RETURN:
        case IF:
        case PRINT:
        case WHILE:
        case INTEGER_LITERAL:
        case AP:
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        Statement();
      }
      jj_consume_token(FC);
      break;
      jj_consume_token(AC);
      jj_consume_token(FC);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case FLOAT:
    case BOOLEAN:
    case CHAR:
    case VOID:
      InternalVariableDeclaration();
      break;
    case RETURN:
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case AP:
      case IDENTIFICADOR:
        Expression();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      break;
    case IF:
      IfStatement();
      break;
    case PRINT:
      PrintStatement();
      break;
    case WHILE:
      WhileStatement();
      break;
    case INTEGER_LITERAL:
    case AP:
    case IDENTIFICADOR:
      Expression();
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void InternalVariableDeclaration() throws ParseException {
    Type();
    jj_consume_token(IDENTIFICADOR);
    VariableDeclaratorLine();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      VariableDeclaratorLine();
    }
    jj_consume_token(SEMICOLON);
  }

  final public void VariableDeclaratorLine() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      Expression();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  final public void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AP:
        MethodCall();
        break;
      case GT:
      case LT:
      case EQ:
      case GE:
      case NE:
        TestingExpression();
        break;
      default:
        jj_la1[15] = jj_gen;
        NumericExpression();
      }
      break;
    case AP:
      jj_consume_token(AP);
      Expression();
      jj_consume_token(FP);
      break;
    case INTEGER_LITERAL:
      LiteralExpression();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NumericExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case STAR:
    case SLASH:
    case REM:
    case PLUSASSIGN:
    case MINUSASSIGN:
    case STARASSIGN:
    case SLASHASSIGN:
    case REMASSIGN:
      FullExpression();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
  }

  final public void FullExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
      break;
    case STAR:
      jj_consume_token(STAR);
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
      break;
    case SLASH:
      jj_consume_token(SLASH);
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
      break;
    case REM:
      jj_consume_token(REM);
      break;
    case REMASSIGN:
      jj_consume_token(REMASSIGN);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Expression();
  }

  final public void MethodCall() throws ParseException {
    jj_consume_token(AP);
    ParameterCallList();
    jj_consume_token(FP);
  }

  final public void ParameterCallList() throws ParseException {
    Expression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      Expression();
    }
  }

  final public void LiteralExpression() throws ParseException {
    jj_consume_token(INTEGER_LITERAL);
  }

  final public void TestingExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GT:
      jj_consume_token(GT);
      break;
    case LT:
      jj_consume_token(LT);
      break;
    case GE:
      jj_consume_token(GE);
      break;
    case EQ:
      jj_consume_token(EQ);
      break;
    case NE:
      jj_consume_token(NE);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Expression();
  }

  final public void IfStatement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(AP);
    Expression();
    jj_consume_token(FP);
    StatementBlock();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      StatementBlock();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  final public void PrintStatement() throws ParseException {
    jj_consume_token(PRINT);
    jj_consume_token(AP);
    Expression();
    jj_consume_token(FP);
    jj_consume_token(SEMICOLON);
  }

  final public void WhileStatement() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(AP);
    Expression();
    jj_consume_token(FP);
    StatementBlock();
  }

  final public void Modifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      jj_consume_token(PUBLIC);
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public Scanner_1TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000,0x1800000,0x0,0x40000,0x400000,0x0,0x0,0x101e00,0x0,0xe2301e00,0x0,0x80000000,0xe2301e00,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x4000000,0x1800000,0x101e00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x1820,0x0,0x0,0x1000,0x1800,0x0,0x1000,0x20,0x80,0x20,0x20,0x1000,0x8000,0xd30020,0x20,0xf0000000,0xf0000000,0x1000,0xd30000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x40,0x0,0x0,0x0,0x40,0x3f,0x3f,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Scanner_1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Scanner_1(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Scanner_1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Scanner_1(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Scanner_1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Scanner_1(Scanner_1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Scanner_1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[74];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 74; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
