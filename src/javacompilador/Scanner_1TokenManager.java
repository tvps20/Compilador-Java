/* Generated By:JavaCC: Do not edit this line. Scanner_1TokenManager.java */
package compilador;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;

/** Token Manager. */
public class Scanner_1TokenManager implements Scanner_1Constants
{
    int countLexError = 0;
    public int foundLexError() {
        return countLexError;
    }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7fffff00L) != 0L)
         {
            jjmatchedKind = 70;
            return 62;
         }
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x10L) != 0L)
            return 47;
         if ((active0 & 0x600000000000L) != 0L)
            return 63;
         if ((active0 & 0x300000000000000L) != 0L)
         {
            jjmatchedKind = 73;
            return 30;
         }
         if ((active0 & 0x7cff9e0000000000L) != 0L || (active1 & 0x2fL) != 0L)
            return 30;
         return -1;
      case 1:
         if ((active0 & 0x2000000L) != 0L)
            return 62;
         if ((active0 & 0xff0400000000000L) != 0L || (active1 & 0x3eL) != 0L)
            return 30;
         if ((active0 & 0x7dffff00L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
            return 62;
         }
         return -1;
      case 2:
         if ((active0 & 0x7dfffd00L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 2;
            return 62;
         }
         if ((active0 & 0x200L) != 0L)
            return 62;
         return -1;
      case 3:
         if ((active0 & 0xc1c5000L) != 0L)
            return 62;
         if ((active0 & 0x71e3ad00L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 3;
            return 62;
         }
         return -1;
      case 4:
         if ((active0 & 0x21e1a900L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 4;
            return 62;
         }
         if ((active0 & 0x50020400L) != 0L)
            return 62;
         return -1;
      case 5:
         if ((active0 & 0x20810800L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 5;
            return 62;
         }
         if ((active0 & 0x160a100L) != 0L)
            return 62;
         return -1;
      case 6:
         if ((active0 & 0x810800L) != 0L)
            return 62;
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 6;
            return 30;
         }
         return -1;
      case 7:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 7;
            return 30;
         }
         return -1;
      case 8:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 8;
            return 30;
         }
         return -1;
      case 9:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 9;
            return 30;
         }
         return -1;
      case 10:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 10;
            return 30;
         }
         return -1;
      case 11:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 11;
            return 30;
         }
         return -1;
      case 12:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 12;
            return 30;
         }
         return -1;
      case 13:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 13;
            return 30;
         }
         return -1;
      case 14:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 14;
            return 30;
         }
         return -1;
      case 15:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 15;
            return 30;
         }
         return -1;
      case 16:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 16;
            return 30;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 37:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 37);
      case 41:
         return jjStopAtPos(0, 38);
      case 42:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 43:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x2L);
      case 44:
         return jjStartNfaWithStates_0(0, 44, 30);
      case 45:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x4L);
      case 46:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 47:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 58:
         return jjStartNfaWithStates_0(0, 51, 30);
      case 59:
         return jjStartNfaWithStates_0(0, 43, 30);
      case 60:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x20002000L, 0x0L);
      case 91:
         return jjStartNfaWithStates_0(0, 41, 30);
      case 93:
         return jjStartNfaWithStates_0(0, 42, 30);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x21000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x10000400L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x2008300L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1810000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 39);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 40);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 57, 30);
         break;
      case 42:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 46, 30);
         break;
      case 43:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 58, 30);
         break;
      case 45:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 59, 30);
         break;
      case 61:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 52, 30);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 53, 30);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 54, 30);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 55, 30);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(1, 65, 30);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(1, 66, 30);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 67, 30);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(1, 68, 30);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 69, 30);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10050000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      case 102:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 62);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40001000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4020400L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x300L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x100800L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x8880000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x402000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1004000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
      case 124:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 56, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x421000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x40940100L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x10004000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x24000000L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 62);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 100:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 62);
         break;
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 62);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 62);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 108:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 62);
         return jjMoveStringLiteralDfa4_0(active0, 0x41000800L);
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 62);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 62);
         break;
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 62);
         return jjMoveStringLiteralDfa4_0(active0, 0x10020000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x20400000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x810000L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 62);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 62);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000800L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1400100L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x208000L);
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 62);
         break;
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 62);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 99:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 62);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 62);
         break;
      case 103:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 62);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 62);
         break;
      case 111:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 62);
         break;
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 62);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 62);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 62);
         break;
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 62);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(17, 29, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 62;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 63:
                  if ((0xfffffcfeffffc9ffL & l) != 0L)
                  {
                     if (kind > 73)
                        kind = 73;
                     jjCheckNAdd(30);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 47:
                  if ((0xfffffcfeffffc9ffL & l) != 0L)
                  {
                     if (kind > 73)
                        kind = 73;
                     jjCheckNAdd(30);
                  }
                  if (curChar == 42)
                     jjCheckNAddStates(3, 6);
                  else if (curChar == 47)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAddTwoStates(48, 49);
                  }
                  break;
               case 62:
                  if ((0xfffffcfeffffc9ffL & l) != 0L)
                  {
                     if (kind > 73)
                        kind = 73;
                     jjCheckNAdd(30);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                     jjCheckNAddTwoStates(28, 29);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  break;
               case 0:
                  if ((0xfffffcfeffffc9ffL & l) != 0L)
                  {
                     if (kind > 73)
                        kind = 73;
                     jjCheckNAdd(30);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 13);
                  else if (curChar == 47)
                     jjAddStates(14, 15);
                  else if (curChar == 34)
                     jjCheckNAddStates(16, 18);
                  else if (curChar == 39)
                     jjAddStates(19, 20);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddStates(0, 2);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 39)
                     jjAddStates(19, 20);
                  break;
               case 10:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 35)
                     kind = 35;
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 11);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(16, 18);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 22:
                  if (curChar == 34 && kind > 36)
                     kind = 36;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(21, 24);
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar == 36 && kind > 70)
                     kind = 70;
                  break;
               case 30:
                  if ((0xfffffcfeffffc9ffL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 13);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar != 46)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddStates(25, 27);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddStates(25, 27);
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddTwoStates(37, 8);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddTwoStates(41, 8);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 44:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 8);
                  break;
               case 46:
                  if (curChar == 47)
                     jjAddStates(14, 15);
                  break;
               case 48:
                  if ((0xfffffffbffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
                  if ((0x8400002400L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 51:
                  if (curChar != 10)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 52:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 42)
                     jjCheckNAddStates(3, 6);
                  break;
               case 54:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  break;
               case 55:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  break;
               case 57:
                  if ((0x8400002400L & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  break;
               case 58:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 59:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 10)
                     jjCheckNAddStates(3, 6);
                  break;
               case 61:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 63:
               case 30:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAdd(30);
                  break;
               case 47:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAdd(30);
                  break;
               case 62:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 73)
                        kind = 73;
                     jjCheckNAdd(30);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                     jjCheckNAddTwoStates(28, 29);
                  }
                  break;
               case 0:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 73)
                        kind = 73;
                     jjCheckNAdd(30);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                     jjCheckNAddTwoStates(28, 29);
                  }
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 31)
                     kind = 31;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(31, 32);
                  break;
               case 8:
                  if ((0x5000000050L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 92)
                     jjAddStates(33, 35);
                  break;
               case 13:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(36, 38);
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 27:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 28:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(39, 40);
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(41, 42);
                  break;
               case 43:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(43, 44);
                  break;
               case 48:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if (curChar == 92)
                     jjAddStates(45, 46);
                  break;
               case 50:
                  if ((0x14404410000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 55:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  break;
               case 56:
                  if (curChar == 92)
                     jjAddStates(47, 48);
                  break;
               case 57:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 63:
               case 30:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAdd(30);
                  break;
               case 47:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAdd(30);
                  break;
               case 62:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAdd(30);
                  break;
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAdd(30);
                  break;
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(16, 18);
                  break;
               case 48:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjAddStates(49, 50);
                  break;
               case 55:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(3, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 62 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   4, 5, 8, 54, 55, 56, 59, 32, 33, 38, 39, 42, 43, 8, 47, 53, 
   19, 20, 22, 10, 12, 19, 20, 24, 22, 34, 35, 8, 42, 43, 8, 6, 
   7, 13, 14, 16, 21, 23, 25, 36, 37, 40, 41, 44, 45, 50, 52, 57, 
   61, 48, 49, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\151\156\151\143\151\157", 
"\151\156\164", "\146\154\157\141\164", "\142\157\157\154\145\141\156", "\143\150\141\162", 
"\123\164\162\151\156\147", "\156\165\154\154", "\151\155\160\157\162\164", 
"\160\141\143\153\141\147\145", "\143\154\141\163\163", "\155\141\151\156", "\141\162\147\163", 
"\166\157\151\144", "\162\145\164\165\162\156", "\163\164\141\164\151\143", 
"\160\162\151\166\141\164\145", "\160\165\142\154\151\143", "\151\146", "\145\154\163\145", 
"\164\162\165\145", "\146\141\154\163\145", 
"\123\171\163\164\145\155\56\157\165\164\56\160\162\151\156\164\154\156", "\167\150\151\154\145", null, null, null, null, null, null, "\50", "\51", 
"\173", "\175", "\133", "\135", "\73", "\54", "\56", "\56\52", "\75", "\76", "\74", 
"\41", "\72", "\75\75", "\74\75", "\76\75", "\41\75", "\174\174", "\46\46", "\53\53", 
"\55\55", "\53", "\55", "\52", "\57", "\45", "\53\75", "\55\75", "\52\75", "\57\75", 
"\45\75", null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffaffffff01L, 0x7fL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x200L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x200L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[62];
private final int[] jjstateSet = new int[124];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public Scanner_1TokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public Scanner_1TokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 62; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
            SkipLexicalActions(matchedToken);
         }
         else
            SkipLexicalActions(null);
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 73 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        countLexError++;
        System.err.println("Linha " + input_stream.getEndLine() + " Coluna " + input_stream.getEndColumn() +
        " Caractere invalido encontrado: " + image + " " + "TOTAL ERRO " + countLexError);
        System.out.println("Error Lexico -----> " + image);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
                           System.out.println("Palavra Reservada: " + image);
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
                     System.out.println("Tipo int: " + image);
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                          System.out.println("Tipo Float: " + image);
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
                             System.out.println("Tipo Boolean: " + image);
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                        System.out.println("Tipo Char: " + image);
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
                            System.out.println("Tipo String: " + image);
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                         System.out.println("Palavra Reservada: " + image);
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
                            System.out.println("Palavra Reservada: " + image);
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
                             System.out.println("Palavra Reservada: " + image);
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
                           System.out.println("Palavra Reservada: " + image);
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
                         System.out.println("Palavra Reservada: " + image);
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
                         System.out.println("Palavra Reservada: " + image);
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                         System.out.println("Tipo Void: " + image);
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
                             System.out.println("Palavra Reservada: " + image);
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                             System.out.println("Palavra Reservada: " + image);
         break;
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
                               System.out.println("Palavra Reservada: " + image);
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
                             System.out.println("Palavra Reservada: " + image);
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
                     System.out.println("Palavra Reservada: " + image);
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
                         System.out.println("Palavra Reservada: " + image);
         break;
      case 27 :
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
                         System.out.println("Palavra Reservada: " + image);
         break;
      case 28 :
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
                           System.out.println("Palavra Reservada: " + image);
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
                                        System.out.println("Palavra Reservada: " + image);
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
                           System.out.println("Palavra Reservada: " + image);
         break;
      case 31 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          System.out.println("Literal Decimal: " + image);
         break;
      case 33 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          System.out.println("Literal Ponto Flutuante: " + image);
         break;
      case 35 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          System.out.println("Literal Char: " + image);
         break;
      case 36 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          System.out.println("Literal String: " + image);
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
                  System.out.println("Abre Parentese: " + image);
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
                  System.out.println("Fecha Parentese: " + image);
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
                  System.out.println("Abre Chaves: " + image);
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
                  System.out.println("Fecha Chaves: " + image);
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
                  System.out.println("Abre Cochetes: " + image);
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
                  System.out.println("Fecha Cochetes: " + image);
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
                         System.out.println("Ponto e Virgula: " + image);
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
                     System.out.println("Virgula: " + image);
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
                   System.out.println("Ponto: " + image);
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
                         System.out.println("Ponto e Asterisco: " + image);
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
                      System.out.println("Operador de Atribuicao: " + image);
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
                  System.out.println("Operador de Maior: " + image);
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
                  System.out.println("Operador de Menor: " + image);
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
                    System.out.println("Operador de Nega\u00c3\u00a7\u00c3\u00a3o: " + image);
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
                     System.out.println("Operador de Dois Pontos: " + image);
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
                   System.out.println("Operador de Igualdade: " + image);
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
                   System.out.println("Operador de Menor Igual: " + image);
         break;
      case 54 :
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
                   System.out.println("Operador de Maior Igual: " + image);
         break;
      case 55 :
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
                   System.out.println("Operador de Diferente: " + image);
         break;
      case 56 :
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
                      System.out.println("Operador Ou: " + image);
         break;
      case 57 :
        image.append(jjstrLiteralImages[57]);
        lengthOfMatch = jjstrLiteralImages[57].length();
                       System.out.println("Operador E: " + image);
         break;
      case 58 :
        image.append(jjstrLiteralImages[58]);
        lengthOfMatch = jjstrLiteralImages[58].length();
                     System.out.println("Operador de Incremento: " + image);
         break;
      case 59 :
        image.append(jjstrLiteralImages[59]);
        lengthOfMatch = jjstrLiteralImages[59].length();
                     System.out.println("Operador de Decremento: " + image);
         break;
      case 60 :
        image.append(jjstrLiteralImages[60]);
        lengthOfMatch = jjstrLiteralImages[60].length();
                    System.out.println("Operador de Soma: " + image);
         break;
      case 61 :
        image.append(jjstrLiteralImages[61]);
        lengthOfMatch = jjstrLiteralImages[61].length();
                     System.out.println("Operador de Subtra\u00c3\u00a7\u00c3\u00a3o: " + image);
         break;
      case 62 :
        image.append(jjstrLiteralImages[62]);
        lengthOfMatch = jjstrLiteralImages[62].length();
                    System.out.println("Operador de Multiplica\u00c3\u00a7\u00c3\u00a3o: " + image);
         break;
      case 63 :
        image.append(jjstrLiteralImages[63]);
        lengthOfMatch = jjstrLiteralImages[63].length();
                     System.out.println("Operador de Divis\u00c3\u00a3o: " + image);
         break;
      case 64 :
        image.append(jjstrLiteralImages[64]);
        lengthOfMatch = jjstrLiteralImages[64].length();
                   System.out.println("Operador de Modulo: " + image);
         break;
      case 65 :
        image.append(jjstrLiteralImages[65]);
        lengthOfMatch = jjstrLiteralImages[65].length();
                           System.out.println("Operador de Mais Igual: " + image);
         break;
      case 66 :
        image.append(jjstrLiteralImages[66]);
        lengthOfMatch = jjstrLiteralImages[66].length();
                            System.out.println("Operador de Menos Igual: " + image);
         break;
      case 67 :
        image.append(jjstrLiteralImages[67]);
        lengthOfMatch = jjstrLiteralImages[67].length();
                           System.out.println("Operador de Vezes Igual: " + image);
         break;
      case 68 :
        image.append(jjstrLiteralImages[68]);
        lengthOfMatch = jjstrLiteralImages[68].length();
                            System.out.println("Operador de Divis\u00c3\u00a3o Igual: " + image);
         break;
      case 69 :
        image.append(jjstrLiteralImages[69]);
        lengthOfMatch = jjstrLiteralImages[69].length();
                          System.out.println("Operador de Modulo Igual: " + image);
         break;
      case 70 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                           System.out.println("Identificador: " + image);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
